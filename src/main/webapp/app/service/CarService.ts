/**
 * Generated by orval v6.9.4 🍺
 * Do not edit manually.
 * Quarkus Monorepo
 * Quickstart to demo Quarkus/React monorepo
 * OpenAPI spec version: 1.0.0
 */
import {
    useQuery,
    useMutation
} from '@tanstack/react-query'
import type {
    UseQueryOptions,
    UseMutationOptions,
    QueryFunction,
    MutationFunction,
    UseQueryResult,
    QueryKey
} from '@tanstack/react-query'
import { useAxiosMutator } from './AxiosMutator'
import type { ErrorType } from './AxiosMutator'
export type GetEntityCarsParams = { request?: string };

export interface CarEntity {
    id?: number;
    vin?: string;
    make?: string;
    model?: string;
    year?: number;
    color?: string;
    price?: number;
}

export interface QueryResponseCarEntity {
    totalRecords?: number;
    records?: CarEntity[];
}




export const useGetEntityCarsHook = () => {
    const getEntityCars = useAxiosMutator<QueryResponseCarEntity>();

    return (
        params?: GetEntityCarsParams,
        signal?: AbortSignal,
    ) => {
        return getEntityCars(
            {
                url: `/entity/cars`, method: 'get',
                params, signal
            },
        );
    }
}


export const getGetEntityCarsQueryKey = (params?: GetEntityCarsParams,) => [`/entity/cars`, ...(params ? [params] : [])];


export type GetEntityCarsQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useGetEntityCarsHook>>>>
export type GetEntityCarsQueryError = ErrorType<unknown>

export const useGetEntityCars = <TData = Awaited<ReturnType<ReturnType<typeof useGetEntityCarsHook>>>, TError = ErrorType<unknown>>(
    params?: GetEntityCarsParams, options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetEntityCarsHook>>>, TError, TData>, }

): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

    const { query: queryOptions } = options ?? {};

    const queryKey = queryOptions?.queryKey ?? getGetEntityCarsQueryKey(params);

    const getEntityCars = useGetEntityCarsHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useGetEntityCarsHook>>>> = ({ signal }) => getEntityCars(params, signal);

    const query = useQuery<Awaited<ReturnType<ReturnType<typeof useGetEntityCarsHook>>>, TError, TData>(queryKey, queryFn, queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

    query.queryKey = queryKey;

    return query;
}


export const usePostEntityCarsHook = () => {
    const postEntityCars = useAxiosMutator<void>();

    return (
        carEntity: CarEntity,
    ) => {
        return postEntityCars(
            {
                url: `/entity/cars`, method: 'post',
                headers: { 'Content-Type': 'application/json', },
                data: carEntity
            },
        );
    }
}



export type PostEntityCarsMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof usePostEntityCarsHook>>>>
export type PostEntityCarsMutationBody = CarEntity
export type PostEntityCarsMutationError = ErrorType<unknown>

export const usePostEntityCars = <TError = ErrorType<unknown>,

    TContext = unknown>(options?: { mutation?: UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePostEntityCarsHook>>>, TError, { data: CarEntity }, TContext>, }
    ) => {
    const { mutation: mutationOptions } = options ?? {};

    const postEntityCars = usePostEntityCarsHook()


    const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof usePostEntityCarsHook>>>, { data: CarEntity }> = (props) => {
        const { data } = props ?? {};

        return postEntityCars(data,)
    }

    return useMutation<Awaited<ReturnType<typeof postEntityCars>>, TError, { data: CarEntity }, TContext>(mutationFn, mutationOptions)
}

export const useGetEntityCarsIdHook = () => {
    const getEntityCarsId = useAxiosMutator<CarEntity>();

    return (
        id: number,
        signal?: AbortSignal,
    ) => {
        return getEntityCarsId(
            {
                url: `/entity/cars/${id}`, method: 'get', signal
            },
        );
    }
}


export const getGetEntityCarsIdQueryKey = (id: number,) => [`/entity/cars/${id}`];


export type GetEntityCarsIdQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useGetEntityCarsIdHook>>>>
export type GetEntityCarsIdQueryError = ErrorType<unknown>

export const useGetEntityCarsId = <TData = Awaited<ReturnType<ReturnType<typeof useGetEntityCarsIdHook>>>, TError = ErrorType<unknown>>(
    id: number, options?: { query?: UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetEntityCarsIdHook>>>, TError, TData>, }

): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

    const { query: queryOptions } = options ?? {};

    const queryKey = queryOptions?.queryKey ?? getGetEntityCarsIdQueryKey(id);

    const getEntityCarsId = useGetEntityCarsIdHook();

    const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useGetEntityCarsIdHook>>>> = ({ signal }) => getEntityCarsId(id, signal);

    const query = useQuery<Awaited<ReturnType<ReturnType<typeof useGetEntityCarsIdHook>>>, TError, TData>(queryKey, queryFn, { enabled: !!(id), ...queryOptions }) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

    query.queryKey = queryKey;

    return query;
}


export const usePutEntityCarsIdHook = () => {
    const putEntityCarsId = useAxiosMutator<CarEntity>();

    return (
        id: number,
        carEntity: CarEntity,
    ) => {
        return putEntityCarsId(
            {
                url: `/entity/cars/${id}`, method: 'put',
                headers: { 'Content-Type': 'application/json', },
                data: carEntity
            },
        );
    }
}



export type PutEntityCarsIdMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof usePutEntityCarsIdHook>>>>
export type PutEntityCarsIdMutationBody = CarEntity
export type PutEntityCarsIdMutationError = ErrorType<unknown>

export const usePutEntityCarsId = <TError = ErrorType<unknown>,

    TContext = unknown>(options?: { mutation?: UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePutEntityCarsIdHook>>>, TError, { id: number; data: CarEntity }, TContext>, }
    ) => {
    const { mutation: mutationOptions } = options ?? {};

    const putEntityCarsId = usePutEntityCarsIdHook()


    const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof usePutEntityCarsIdHook>>>, { id: number; data: CarEntity }> = (props) => {
        const { id, data } = props ?? {};

        return putEntityCarsId(id, data,)
    }

    return useMutation<Awaited<ReturnType<typeof putEntityCarsId>>, TError, { id: number; data: CarEntity }, TContext>(mutationFn, mutationOptions)
}

export const useDeleteEntityCarsIdHook = () => {
    const deleteEntityCarsId = useAxiosMutator<void>();

    return (
        id: number,
    ) => {
        return deleteEntityCarsId(
            {
                url: `/entity/cars/${id}`, method: 'delete'
            },
        );
    }
}



export type DeleteEntityCarsIdMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useDeleteEntityCarsIdHook>>>>

export type DeleteEntityCarsIdMutationError = ErrorType<unknown>

export const useDeleteEntityCarsId = <TError = ErrorType<unknown>,

    TContext = unknown>(options?: { mutation?: UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useDeleteEntityCarsIdHook>>>, TError, { id: number }, TContext>, }
    ) => {
    const { mutation: mutationOptions } = options ?? {};

    const deleteEntityCarsId = useDeleteEntityCarsIdHook()


    const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useDeleteEntityCarsIdHook>>>, { id: number }> = (props) => {
        const { id } = props ?? {};

        return deleteEntityCarsId(id,)
    }

    return useMutation<Awaited<ReturnType<typeof deleteEntityCarsId>>, TError, { id: number }, TContext>(mutationFn, mutationOptions)
}

